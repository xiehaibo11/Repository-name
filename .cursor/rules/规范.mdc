我帮你整理了一份 **Vue 3 + TypeScript 项目编码规范文档**，结合了业界常用的 ESLint + Prettier 规则和团队协作经验，可以直接在你的项目中使用，也方便团队统一风格。

---

## 📄 Vue 3 + TypeScript 项目编码规范

### 1. 基本原则

* **可读性优先**：代码易读性比一时的写法快更重要。
* **一致性优先**：团队所有成员遵循同一套规范。
* **类型安全**：尽量使用 TypeScript 类型声明，避免 `any`。
* **组件化思想**：每个组件功能单一、职责明确。

---

### 2. 目录结构建议

```
src/
│── api/            # 接口请求封装
│── assets/         # 静态资源
│── components/     # 公共组件
│── composables/    # 组合式 API 封装
│── router/         # 路由配置
│── store/          # 状态管理（Pinia/Vuex）
│── styles/         # 公共样式
│── utils/          # 工具函数
│── views/          # 页面组件
│── App.vue
│── main.ts
```

---

### 3. 命名规范

#### 文件命名

* **组件文件**：`PascalCase`（如 `UserProfile.vue`）。
* **工具函数文件**：`kebab-case`（如 `date-utils.ts`）。
* **样式文件**：`kebab-case`（如 `reset-style.scss`）。
* **路由/Store 模块**：`camelCase`（如 `userStore.ts`）。

#### 变量 & 常量

* **变量**：`camelCase`（如 `userList`）。
* **常量**：全大写 + 下划线（如 `API_BASE_URL`）。
* **类型/接口**：`PascalCase`（如 `UserInfo`）。

#### 组件命名

* 遵循 `Base` 前缀表示全局通用组件（如 `BaseButton.vue`）。
* 业务相关组件用业务前缀（如 `UserCard.vue`）。

---

### 4. Vue 编码规范

#### `<script setup>` 推荐写法

```vue
<script setup lang="ts">
import { ref } from 'vue'

const count = ref<number>(0)

function increment(): void {
  count.value++
}
</script>
```

#### Props 定义

```ts
interface Props {
  title: string
  count?: number
}

const props = defineProps<Props>()
```

#### Emits 定义

```ts
const emit = defineEmits<{
  (e: 'update', value: string): void
}>()
```

#### 组件结构顺序

1. **`<template>`**：布局结构，尽量简洁。
2. **`<script setup>`**：逻辑代码，按「变量 → 方法 → 生命周期 → 监听」顺序。
3. **`<style scoped>`**：样式，尽量使用 BEM 命名。

---

### 5. 样式规范

* 使用 **BEM 命名**：

```css
.card {}
.card__title {}
.card--active {}
```

* 避免全局污染，除非是公共样式文件。
* 优先使用 `rem` 或 `em` 代替 `px`（响应式友好）。

---

### 6. TypeScript 规范

* 禁止使用 `any`（除非有明确理由）。
* 接口 vs 类型：

  * **接口** (`interface`)：用于对象/类定义。
  * **类型别名** (`type`)：用于联合类型、复杂类型组合。
* 所有函数必须显式声明返回类型：

```ts
function sum(a: number, b: number): number {
  return a + b
}
```

---

### 7. API 请求规范

* 统一封装 `axios` 实例。
* GET 请求参数用对象传递，不直接拼接字符串。
* POST 请求参数用接口类型约束：

```ts
interface LoginParams {
  username: string
  password: string
}

function login(data: LoginParams) {
  return http.post('/login', data)
}
```

---

### 8. 代码风格工具

#### ESLint + Prettier 常用配置

`.eslintrc.js`

```js
module.exports = {
  root: true,
  env: { browser: true, es2021: true },
  extends: [
    'eslint:recommended',
    'plugin:vue/vue3-recommended',
    '@vue/typescript/recommended',
    'prettier'
  ],
  rules: {
    'vue/multi-word-component-names': 'off',
    '@typescript-eslint/no-explicit-any': 'warn'
  }
}
```

`.prettierrc`

```json
{
  "singleQuote": true,
  "semi": false,
  "printWidth": 100,
  "tabWidth": 2,
  "trailingComma": "none"
}
```

---

### 9. Git 提交规范（可配合 commitlint）

```
feat: 新功能
fix: 修复 bug
docs: 文档变更
style: 代码格式（不影响功能）
refactor: 重构（非修复 bug 或添加功能）
perf: 性能优化
test: 测试相关
chore: 构建或辅助工具变动
```

---

### 10. 注意事项

* 组件拆分粒度适中，保持单一职责。
* 避免过度嵌套的 `<template>`，最多 3 层。
* 尽量使用组合式 API（`ref`, `reactive`, `computed`）替代 `data`/`methods`。
* 公共逻辑提取到 `composables/`，避免代码重复。
* 所有接口和组件导出时显式类型声明。

---

我建议你可以直接把这个文档放到项目的 **`docs/`** 或 **`README.md`**，并配合 ESLint + Prettier 自动化执行，这样新成员进来就能立刻遵循相同规范。

 带 ESLint + Prettier + TypeScript 的 Vue 3 项目模板**，这样你的团队直接 clone 就能用。
